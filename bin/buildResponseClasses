#!/usr/bin/env php
<?php

/*
 * This file is part of php-restcord.
 *
 * (c) Aaron Scherer <aequasi@gmail.com>
 *
 * This source file is subject to the license that is bundled
 * with this source code in the file LICENSE
 */

require __DIR__.'/../vendor/autoload.php';

use gossi\codegen\generator\CodeGenerator;
use gossi\codegen\model\PhpClass;
use gossi\codegen\model\PhpProperty;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

$loader = new Twig_Loader_Filesystem(__DIR__.'/../src/Resources/');
$twig   = new Twig_Environment($loader, ['debug' => true]);
$twig->addExtension(new Twig_Extension_Debug());

$license = <<<EOF
<?php

/*
 * Copyright 2017 Aaron Scherer
 *
 * This source file is subject to the license that is bundled
 * with this source code in the file LICENSE
 *
 * @package     restcord/restcord
 * @copyright   Aaron Scherer 2017
 * @license     MIT
 */
\n
EOF;

function recursiveRemoveDirectory($directory)
{
    foreach (glob("{$directory}/*") as $file) {
        if (is_dir($file)) {
            recursiveRemoveDirectory($file);
        } else {
            if (strpos($file, 'HybridResponse') === false) {
                unlink($file);
            }
        }
    }

    try {
        @rmdir($directory);
    } catch (\Exception $e) {
    }
}

(new Application('Build Response Classes', '1.0.0'))
    ->register('buildResponseClasses')
    ->addArgument('version', InputArgument::REQUIRED, 'Version to build')
    ->setCode(
        function (InputInterface $input, OutputInterface $output) use ($twig, $license) {
            $style = new \Symfony\Component\Console\Style\SymfonyStyle($input, $output);
            $style->title("Building Response Classes for: ".$input->getArgument('version'));

            $path = __DIR__.'/../src/Response';
            try {
                recursiveRemoveDirectory($path);
                @mkdir($path, 02775, true);
            } catch (\Exception $e) {
            }
            $path = realpath($path);

            $definition = \GuzzleHttp\json_decode(
                file_get_contents(
                    __DIR__.'/../src/Resources/service_description-v'.$input->getArgument('version').'.json'
                ),
                true
            );

            $generator = new CodeGenerator();
            foreach ($definition['models'] as $category => $models) {
                foreach ($models as $name => $model) {
                    $filePath = $path.'/'.ucwords($category).'/';
                    if (!file_exists($filePath)) {
                        mkdir($filePath, 02775, true);
                    }

                    $class = new PhpClass();
                    $class->setQualifiedName('RestCord\\Response\\'.ucwords($category).'\\'.ucwords($name));
                    $class->setDescription(ucwords($name)." Response class");
                    $class->setProperties(
                        array_map(
                            function ($name, $p) {
                                $property = new PhpProperty($name);
                                $property->setType(
                                    str_replace(
                                        ['snowflake', 'object', 'timestamp', 'integer', 'datetime', 'User'],
                                        ['int', 'array', 'int', 'int', '\DateTime', 'array'],
                                        $p['type']
                                    ),
                                    ucfirst($p['description'])
                                );

                                if (isset($p['nullable']) && $p['nullable']) {
                                    $property->setType($property->getType().'|null', $property->getDescription());
                                }

                                return $property;
                            },
                            array_keys($model['properties']),
                            $model['properties']
                        )
                    );

                    file_put_contents($filePath.'/'.ucwords($name).'.php', $license.$generator->generate($class));
                }
            }

            $style->success('Finished. Classes built in: '.realpath($path));
        }
    )
    ->getApplication()
    ->setDefaultCommand('buildResponseClasses', true)
    ->run();
